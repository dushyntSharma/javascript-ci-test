### YamlMime:UniversalReference
items:
  - uid: azure-common.global
    id: azure-common.global
    name: GLOBAL
    fullName: GLOBAL
    type: Class
    langs:
      - js
    children:
      - azure-common._global.parse
      - azure-common._global.create
      - azure-common._global.setAgent
      - azure-common._global.DEFAULT_PROTOCOL
      - azure-common._global.noMatchConnectionString
      - azure-common._global.noMatchSettings
      - azure-common._global.parseAndValidateKeys
      - azure-common._global.getValidator
      - azure-common._global.setting
      - azure-common._global.atLeastOne
      - azure-common._global.optional
      - azure-common._global.allRequired
      - azure-common._global.settingWithFunc
      - azure-common._global.matchedSpecification
      - azure-common._global.serializeEntry
      - azure-common._global.propertyType
      - azure-common._global.unserializeValue
      - azure-common._global.serializeQueryValue
      - azure-common._global.format
      - azure-common._global.encodeUri
      - azure-common._global.objectKeysLength
      - azure-common._global.objectFirstKey
      - azure-common._global.objectIsNull
      - azure-common._global.objectIsEmpty
      - azure-common._global.objectIsInt
      - azure-common._global.objectIsString
      - azure-common._global.objectIsFunction
      - azure-common._global.zeroPaddingString
      - azure-common._global.stringIsEmpty
      - azure-common._global.stringFormat
      - azure-common._global.stringStartsWith
      - azure-common._global.stringEndsWith
      - azure-common._global.stringIsInt
      - azure-common._global.stringIsFloat
      - azure-common._global.stringIsNumber
      - azure-common._global.stringIsDate
      - azure-common._global.urlIsHTTPS
      - azure-common._global.removeBOM
      - azure-common._global.merge
      - azure-common._global.inArrayInsensitive
      - azure-common._global.tryGetValueInsensitive
      - azure-common._global.getNameSpace
      - azure-common._global.isInt
      - azure-common._global.tryGetValueChain
      - azure-common._global.truncatedISO8061Date
      - azure-common._global.isBufferAllZero
      - azure-common._global.getContentMd5
      - azure-common._global.isValidUri
      - azure-common._global.isValidHDInsightCreationObject
      - azure-common._global.isBase64Encoded
      - azure-common._global.isValidFunction
      - azure-common._global.namespaceNameIsValid
      - azure-common._global.containerNameIsValid
      - azure-common._global.blobNameIsValid
      - azure-common._global.tableNameIsValid
      - azure-common._global.queueNameIsValid
  - uid: azure-common._global.parse
    id: azure-common._global.parse
    name: parse(connectionString)
    summary: Parses a connection string.
    fullName: azure-common.parse(connectionString)
    type: Function
    syntax:
      parameters:
        - id: connectionString
          type:
            - number
          description: The connection string to be parsed.
      return:
        type:
          - object
        description: The connection string object.
      content: function parse(connectionString)
    langs:
      - js
  - uid: azure-common._global.create
    id: azure-common._global.create
    name: create()
    summary: >-
      Creates a filter to handle an error response. This includes parsing and
      normalizing error responses.
    fullName: azure-common.create()
    type: Function
    syntax:
      content: function create()
    langs:
      - js
  - uid: azure-common._global.setAgent
    id: azure-common._global.setAgent
    name: 'setAgent(resouce, proxy)'
    summary: "Set the Agent to use for the request\rResult depends on proxy settings and protocol"
    fullName: 'azure-common.setAgent(resouce, proxy)'
    type: Function
    syntax:
      parameters:
        - id: resouce
          type:
            - object
          description: request options for request.
        - id: proxy
          type:
            - object
          description: parsed url for the proxy.
      content: 'function setAgent(resouce, proxy)'
    langs:
      - js
  - uid: azure-common._global.DEFAULT_PROTOCOL
    id: azure-common._global.DEFAULT_PROTOCOL
    name: DEFAULT_PROTOCOL
    summary: The default protocol.
    fullName: azure-common.DEFAULT_PROTOCOL
    type: Member
    syntax:
      content: DEFAULT_PROTOCOL
    langs:
      - js
  - uid: azure-common._global.noMatchConnectionString
    id: azure-common._global.noMatchConnectionString
    name: noMatchConnectionString(connectionString)
    summary: "Throws an exception if the connection string format does not match any of the\ravailable formats."
    fullName: azure-common.noMatchConnectionString(connectionString)
    type: Function
    syntax:
      parameters:
        - id: connectionString
          type:
            - string
          description: The invalid formatted connection string.
      return:
        description: none
      content: function noMatchConnectionString(connectionString)
    langs:
      - js
  - uid: azure-common._global.noMatchSettings
    id: azure-common._global.noMatchSettings
    name: noMatchSettings(settings)
    summary: "Throws an exception if the settings dont match any of the\ravailable formats."
    fullName: azure-common.noMatchSettings(settings)
    type: Function
    syntax:
      parameters:
        - id: settings
          type:
            - object
          description: The invalid settings.
      return:
        description: none
      content: function noMatchSettings(settings)
    langs:
      - js
  - uid: azure-common._global.parseAndValidateKeys
    id: azure-common._global.parseAndValidateKeys
    name: 'parseAndValidateKeys(connectionString, validKeys)'
    summary: "Parses the connection string and then validate that the parsed keys belong to\rthe validSettingKeys"
    fullName: 'azure-common.parseAndValidateKeys(connectionString, validKeys)'
    type: Function
    syntax:
      parameters:
        - id: connectionString
          type:
            - string
          description: The user provided connection string.
        - id: validKeys
          type:
            - array
          description: The valid keys.
      return:
        type:
          - array
        description: The tokenized connection string keys.
      content: 'function parseAndValidateKeys(connectionString, validKeys)'
    langs:
      - js
  - uid: azure-common._global.getValidator
    id: azure-common._global.getValidator
    name: 'getValidator(array, boolean, boolean)'
    summary: >-
      Creates an anonymous function that acts as predicate to perform a
      validation.
    fullName: 'azure-common.getValidator(array, boolean, boolean)'
    type: Function
    syntax:
      parameters:
        - id: array
          type:
            - azure-common.requirements
          description: The array of conditions to satisfy.
        - id: boolean
          type:
            - azure-common.isRequired
          description: "Either these conditions are all required or all\roptional."
        - id: boolean
          type:
            - azure-common.atLeastOne
          description: "Indicates that at least one requirement must\rsucceed."
      return:
        type:
          - function
        description: ''
      content: 'function getValidator(array, boolean, boolean)'
    langs:
      - js
  - uid: azure-common._global.setting
    id: azure-common._global.setting
    name: setting(name)
    summary: "Creates a setting value condition that validates it is one of the\rpassed valid values."
    fullName: azure-common.setting(name)
    type: Function
    syntax:
      parameters:
        - id: name
          type:
            - string
          description: The setting key name.
      return:
        type:
          - array
        description: ''
      content: function setting(name)
    langs:
      - js
  - uid: azure-common._global.atLeastOne
    id: azure-common._global.atLeastOne
    name: atLeastOne()
    summary: Creates an "at lease one" predicate for the provided list of requirements.
    fullName: azure-common.atLeastOne()
    type: Function
    syntax:
      return:
        description: callable
      content: function atLeastOne()
    langs:
      - js
  - uid: azure-common._global.optional
    id: azure-common._global.optional
    name: optional()
    summary: Creates an optional predicate for the provided list of requirements.
    fullName: azure-common.optional()
    type: Function
    syntax:
      return:
        type:
          - function
        description: ''
      content: function optional()
    langs:
      - js
  - uid: azure-common._global.allRequired
    id: azure-common._global.allRequired
    name: allRequired()
    summary: Creates an required predicate for the provided list of requirements.
    fullName: azure-common.allRequired()
    type: Function
    syntax:
      return:
        type:
          - function
        description: ''
      content: function allRequired()
    langs:
      - js
  - uid: azure-common._global.settingWithFunc
    id: azure-common._global.settingWithFunc
    name: 'settingWithFunc(name, predicate)'
    summary: Creates a setting value condition using the passed predicate.
    fullName: 'azure-common.settingWithFunc(name, predicate)'
    type: Function
    syntax:
      parameters:
        - id: name
          type:
            - string
          description: The setting key name.
        - id: predicate
          type:
            - function
          description: The setting value predicate.
      return:
        type:
          - array
        description: ''
      content: 'function settingWithFunc(name, predicate)'
    langs:
      - js
  - uid: azure-common._global.matchedSpecification
    id: azure-common._global.matchedSpecification
    name: matchedSpecification(array)
    summary: Tests to see if a given list of settings matches a set of filters exactly.
    fullName: azure-common.matchedSpecification(array)
    type: Function
    syntax:
      parameters:
        - id: array
          description: $settings The settings to check.
      return:
        description: "boolean If any filter returns null, false. If there are any settings\rleft over after all filters are processed, false. Otherwise true."
      content: function matchedSpecification(array)
    langs:
      - js
  - uid: azure-common._global.serializeEntry
    id: azure-common._global.serializeEntry
    name: 'serializeEntry(content, namespaces)'
    summary: ''
    fullName: 'azure-common.serializeEntry(content, namespaces)'
    type: Function
    syntax:
      parameters:
        - id: content
          type:
            - object
          description: >-
            The content payload as it is to be serialized by js2xml. It should
            include any root node(s).
        - id: namespaces
          type:
            - array
          description: An array of top level namespaces to be defined.
      content: 'function serializeEntry(content, namespaces)'
    langs:
      - js
  - uid: azure-common._global.propertyType
    id: azure-common._global.propertyType
    name: propertyType(value)
    summary: Get the Edm type of an object.
    fullName: azure-common.propertyType(value)
    type: Function
    syntax:
      parameters:
        - id: value
          type:
            - object
          description: A typed instance.
      return:
        type:
          - string
        description: The Edm type.
      content: function propertyType(value)
    langs:
      - js
  - uid: azure-common._global.unserializeValue
    id: azure-common._global.unserializeValue
    name: 'unserializeValue(type, value)'
    summary: Convert a serialized value into an typed object.
    fullName: 'azure-common.unserializeValue(type, value)'
    type: Function
    syntax:
      parameters:
        - id: type
          type:
            - string
          description: The type of the value as it appears in the type attribute.
        - id: value
          type:
            - string
          description: The value in string format.
      return:
        type:
          - object
        description: The typed value.
      content: 'function unserializeValue(type, value)'
    langs:
      - js
  - uid: azure-common._global.serializeQueryValue
    id: azure-common._global.serializeQueryValue
    name: serializeQueryValue(value)
    summary: Serializes value into proper value to be used in odata query value.
    fullName: azure-common.serializeQueryValue(value)
    type: Function
    syntax:
      parameters:
        - id: value
          type:
            - object
          description: The value to be serialized.
      return:
        type:
          - string
        description: The serialized value.
      content: function serializeQueryValue(value)
    langs:
      - js
  - uid: azure-common._global.format
    id: azure-common._global.format
    name: 'format(date, skipMilliseconds, millisecondsPading)'
    summary: Formats a date into an iso 8061 string.
    fullName: 'azure-common.format(date, skipMilliseconds, millisecondsPading)'
    type: Function
    syntax:
      parameters:
        - id: date
          type:
            - date
          description: The date to format.
        - id: skipMilliseconds
          type:
            - azure-common.bool
          description: >-
            Boolean value indicating if the miliseconds part of the date should
            not be included.
        - id: millisecondsPading
          type:
            - azure-common.integer
          description: Number of digits to left pad the miliseconds.
      return:
        type:
          - string
        description: The date formated in the ISO 8061 date format.
      content: 'function format(date, skipMilliseconds, millisecondsPading)'
    langs:
      - js
  - uid: azure-common._global.encodeUri
    id: azure-common._global.encodeUri
    name: encodeUri(uri)
    summary: Encodes an URI.
    fullName: azure-common.encodeUri(uri)
    type: Function
    syntax:
      parameters:
        - id: uri
          type:
            - string
          description: The URI to be encoded.
      return:
        type:
          - string
        description: The encoded URI.
      content: function encodeUri(uri)
    langs:
      - js
  - uid: azure-common._global.objectKeysLength
    id: azure-common._global.objectKeysLength
    name: objectKeysLength(value)
    summary: Returns the number of keys (properties) in an object.
    fullName: azure-common.objectKeysLength(value)
    type: Function
    syntax:
      parameters:
        - id: value
          type:
            - object
          description: The object which keys are to be counted.
      return:
        type:
          - number
        description: The number of keys in the object.
      content: function objectKeysLength(value)
    langs:
      - js
  - uid: azure-common._global.objectFirstKey
    id: azure-common._global.objectFirstKey
    name: objectFirstKey(value)
    summary: Returns the name of the first property in an object.
    fullName: azure-common.objectFirstKey(value)
    type: Function
    syntax:
      parameters:
        - id: value
          type:
            - object
          description: The object which key is to be returned.
      return:
        type:
          - number
        description: The name of the first key in the object.
      content: function objectFirstKey(value)
    langs:
      - js
  - uid: azure-common._global.objectIsNull
    id: azure-common._global.objectIsNull
    name: objectIsNull(value)
    summary: Checks if a value is null or undefined.
    fullName: azure-common.objectIsNull(value)
    type: Function
    syntax:
      parameters:
        - id: value
          type:
            - object
          description: The value to check for null or undefined.
      return:
        type:
          - azure-common.bool
        description: 'True if the value is null or undefined, false otherwise.'
      content: function objectIsNull(value)
    langs:
      - js
  - uid: azure-common._global.objectIsEmpty
    id: azure-common._global.objectIsEmpty
    name: objectIsEmpty(object)
    summary: Checks if an object is empty.
    fullName: azure-common.objectIsEmpty(object)
    type: Function
    syntax:
      parameters:
        - id: object
          type:
            - object
          description: The object to check if it is null.
      return:
        type:
          - azure-common.bool
        description: 'True if the object is empty, false otherwise.'
      content: function objectIsEmpty(object)
    langs:
      - js
  - uid: azure-common._global.objectIsInt
    id: azure-common._global.objectIsInt
    name: objectIsInt(value)
    summary: Determines if an object contains an integer number.
    fullName: azure-common.objectIsInt(value)
    type: Function
    syntax:
      parameters:
        - id: value
          type:
            - object
          description: The object to assert.
      return:
        type:
          - azure-common.bool
        description: True if the object contains an integer number; false otherwise.
      content: function objectIsInt(value)
    langs:
      - js
  - uid: azure-common._global.objectIsString
    id: azure-common._global.objectIsString
    name: objectIsString(object)
    summary: Checks if an object is a string.
    fullName: azure-common.objectIsString(object)
    type: Function
    syntax:
      parameters:
        - id: object
          type:
            - object
          description: The object to check if it is a string.
      return:
        type:
          - azure-common.bool
        description: 'True if the object is a strign, false otherwise.'
      content: function objectIsString(object)
    langs:
      - js
  - uid: azure-common._global.objectIsFunction
    id: azure-common._global.objectIsFunction
    name: objectIsFunction(object)
    summary: Check if an object is a function
    fullName: azure-common.objectIsFunction(object)
    type: Function
    syntax:
      parameters:
        - id: object
          type:
            - object
          description: The object to check whether it is function
      return:
        type:
          - azure-common.bool
        description: 'True if the specified object is function, otherwise false'
      content: function objectIsFunction(object)
    langs:
      - js
  - uid: azure-common._global.zeroPaddingString
    id: azure-common._global.zeroPaddingString
    name: zeroPaddingString()
    summary: Front zero padding of string to sepcified length
    fullName: azure-common.zeroPaddingString()
    type: Function
    syntax:
      content: function zeroPaddingString()
    langs:
      - js
  - uid: azure-common._global.stringIsEmpty
    id: azure-common._global.stringIsEmpty
    name: stringIsEmpty(value)
    summary: 'Checks if a value is an empty string, null or undefined.'
    fullName: azure-common.stringIsEmpty(value)
    type: Function
    syntax:
      parameters:
        - id: value
          type:
            - object
          description: 'The value to check for an empty string, null or undefined.'
      return:
        type:
          - azure-common.bool
        description: >-
          True if the value is an empty string, null or undefined, false
          otherwise.
      content: function stringIsEmpty(value)
    langs:
      - js
  - uid: azure-common._global.stringFormat
    id: azure-common._global.stringFormat
    name: 'stringFormat(text, arguments)'
    summary: Formats a text replacing '?' by the arguments.
    fullName: 'azure-common.stringFormat(text, arguments)'
    type: Function
    syntax:
      parameters:
        - id: text
          type:
            - string
          description: The string where the ? should be replaced.
        - id: arguments
          type:
            - array
          description: Value(s) to insert in question mark (?) parameters.
      return:
        type:
          - string
        description: ''
      content: 'function stringFormat(text, arguments)'
    langs:
      - js
  - uid: azure-common._global.stringStartsWith
    id: azure-common._global.stringStartsWith
    name: 'stringStartsWith(text, prefix)'
    summary: Determines if a string starts with another.
    fullName: 'azure-common.stringStartsWith(text, prefix)'
    type: Function
    syntax:
      parameters:
        - id: text
          type:
            - string
          description: The string to assert.
        - id: prefix
          type:
            - string
          description: The string prefix.
      return:
        type:
          - azure-common.Bool
        description: True if the string starts with the prefix; false otherwise.
      content: 'function stringStartsWith(text, prefix)'
    langs:
      - js
  - uid: azure-common._global.stringEndsWith
    id: azure-common._global.stringEndsWith
    name: 'stringEndsWith(text, suffix)'
    summary: Determines if a string ends with another.
    fullName: 'azure-common.stringEndsWith(text, suffix)'
    type: Function
    syntax:
      parameters:
        - id: text
          type:
            - string
          description: The string to assert.
        - id: suffix
          type:
            - string
          description: The string suffix.
      return:
        type:
          - azure-common.Bool
        description: True if the string ends with the suffix; false otherwise.
      content: 'function stringEndsWith(text, suffix)'
    langs:
      - js
  - uid: azure-common._global.stringIsInt
    id: azure-common._global.stringIsInt
    name: stringIsInt(text)
    summary: Determines if a string contains an integer number.
    fullName: azure-common.stringIsInt(text)
    type: Function
    syntax:
      parameters:
        - id: text
          type:
            - string
          description: The string to assert.
      return:
        type:
          - azure-common.Bool
        description: True if the string contains an integer number; false otherwise.
      content: function stringIsInt(text)
    langs:
      - js
  - uid: azure-common._global.stringIsFloat
    id: azure-common._global.stringIsFloat
    name: stringIsFloat(text)
    summary: Determines if a string contains a float number.
    fullName: azure-common.stringIsFloat(text)
    type: Function
    syntax:
      parameters:
        - id: text
          type:
            - string
          description: The string to assert.
      return:
        type:
          - azure-common.Bool
        description: True if the string contains a float number; false otherwise.
      content: function stringIsFloat(text)
    langs:
      - js
  - uid: azure-common._global.stringIsNumber
    id: azure-common._global.stringIsNumber
    name: stringIsNumber(text)
    summary: Determines if a string contains a number.
    fullName: azure-common.stringIsNumber(text)
    type: Function
    syntax:
      parameters:
        - id: text
          type:
            - string
          description: The string to assert.
      return:
        type:
          - azure-common.Bool
        description: True if the string contains a number; false otherwise.
      content: function stringIsNumber(text)
    langs:
      - js
  - uid: azure-common._global.stringIsDate
    id: azure-common._global.stringIsDate
    name: stringIsDate(date)
    summary: Determines if a date object is valid.
    fullName: azure-common.stringIsDate(date)
    type: Function
    syntax:
      parameters:
        - id: date
          type:
            - Date
          description: The date to test
      return:
        type:
          - azure-common.Bool
        description: True if the date is valid; false otherwise.
      content: function stringIsDate(date)
    langs:
      - js
  - uid: azure-common._global.urlIsHTTPS
    id: azure-common._global.urlIsHTTPS
    name: urlIsHTTPS(urlToCheck)
    summary: Checks if a parsed URL is HTTPS
    fullName: azure-common.urlIsHTTPS(urlToCheck)
    type: Function
    syntax:
      parameters:
        - id: urlToCheck
          type:
            - object
          description: The url to check
      return:
        type:
          - azure-common.bool
        description: True if the URL is HTTPS; false otherwise.
      content: function urlIsHTTPS(urlToCheck)
    langs:
      - js
  - uid: azure-common._global.removeBOM
    id: azure-common._global.removeBOM
    name: removeBOM(str)
    summary: Removes the BOM from a string.
    fullName: azure-common.removeBOM(str)
    type: Function
    syntax:
      parameters:
        - id: str
          type:
            - string
          description: The string from where the BOM is to be removed
      return:
        type:
          - string
        description: The string without the BOM.
      content: function removeBOM(str)
    langs:
      - js
  - uid: azure-common._global.merge
    id: azure-common._global.merge
    name: merge(object)
    summary: Merges multiple objects.
    fullName: azure-common.merge(object)
    type: Function
    syntax:
      parameters:
        - id: object
          type:
            - object
          description: The objects to be merged
      return:
        type:
          - object
        description: The merged object.
      content: function merge(object)
    langs:
      - js
  - uid: azure-common._global.inArrayInsensitive
    id: azure-common._global.inArrayInsensitive
    name: 'inArrayInsensitive(needle, haystack)'
    summary: "Checks if a value exists in an array. The comparison is done in a case\rinsensitive manner."
    fullName: 'azure-common.inArrayInsensitive(needle, haystack)'
    type: Function
    syntax:
      parameters:
        - id: needle
          type:
            - string
          description: The searched value.
        - id: haystack
          type:
            - array
          description: The array.
      return:
        type:
          - boolean
        description: ''
      content: 'function inArrayInsensitive(needle, haystack)'
    langs:
      - js
  - uid: azure-common._global.tryGetValueInsensitive
    id: azure-common._global.tryGetValueInsensitive
    name: 'tryGetValueInsensitive(key, haystack, default)'
    summary: "Returns the specified value of the key passed from object and in case that\rthis key doesn't exist, the default value is returned. The key matching is\rdone in a case insensitive manner."
    fullName: 'azure-common.tryGetValueInsensitive(key, haystack, default)'
    type: Function
    syntax:
      parameters:
        - id: key
          type:
            - string
          description: The array key.
        - id: haystack
          type:
            - object
          description: The object to be used.
        - id: default
          type:
            - azure-common.mix
          description: The value to return if $key is not found in $array.
      return:
        description: mix
      content: 'function tryGetValueInsensitive(key, haystack, default)'
    langs:
      - js
  - uid: azure-common._global.getNameSpace
    id: azure-common._global.getNameSpace
    name: getNameSpace()
    summary: 'Returns the namespace for a subscriptoinId, prefix and location'
    fullName: azure-common.getNameSpace()
    tags:
      - originalTitle: subscriptionId
        title: subscriptionid
        text: '{string}  The Azure subscription id.'
        value: '{string}  The Azure subscription id.'
      - originalTitle: prefix
        title: prefix
        text: '{string}          The prifix for the service.'
        value: '{string}          The prifix for the service.'
      - originalTitle: location
        title: location
        text: '{string}        The location of the service.'
        value: '{string}        The location of the service.'
    type: Function
    syntax:
      return:
        type:
          - azure-common.Bool
        description: True if the value is an integer number; false otherwise.
      content: function getNameSpace()
    langs:
      - js
  - uid: azure-common._global.isInt
    id: azure-common._global.isInt
    name: isInt(The)
    summary: Determines if a value (string or number) is an integer number.
    fullName: azure-common.isInt(The)
    type: Function
    syntax:
      parameters:
        - id: The
          type:
            - object
          description: value to assess.
      return:
        type:
          - azure-common.Bool
        description: True if the value is an integer number; false otherwise.
      content: function isInt(The)
    langs:
      - js
  - uid: azure-common._global.tryGetValueChain
    id: azure-common._global.tryGetValueChain
    name: 'tryGetValueChain(object, keys, default)'
    summary: Returns the value in a chained object.
    fullName: 'azure-common.tryGetValueChain(object, keys, default)'
    type: Function
    syntax:
      parameters:
        - id: object
          type:
            - object
          description: The object with the values.
        - id: keys
          type:
            - array
          description: The keys.
        - id: default
          type:
            - azure-common.mix
          description: The value to return if $key is not found in $array.
      return:
        description: mix
      content: 'function tryGetValueChain(object, keys, default)'
    langs:
      - js
  - uid: azure-common._global.truncatedISO8061Date
    id: azure-common._global.truncatedISO8061Date
    name: truncatedISO8061Date(a)
    summary: Rounds a date off to seconds.
    fullName: azure-common.truncatedISO8061Date(a)
    type: Function
    syntax:
      parameters:
        - id: a
          type:
            - Date
          description: date
      return:
        type:
          - string
        description: 'the date in ISO8061 format, with no milliseconds component'
      content: function truncatedISO8061Date(a)
    langs:
      - js
  - uid: azure-common._global.isBufferAllZero
    id: azure-common._global.isBufferAllZero
    name: isBufferAllZero()
    summary: Whether the content of buffer is all zero
    fullName: azure-common.isBufferAllZero()
    type: Function
    syntax:
      content: function isBufferAllZero()
    langs:
      - js
  - uid: azure-common._global.getContentMd5
    id: azure-common._global.getContentMd5
    name: getContentMd5()
    summary: Calculate md5sum for the content
    fullName: azure-common.getContentMd5()
    type: Function
    syntax:
      content: function getContentMd5()
    langs:
      - js
  - uid: azure-common._global.isValidUri
    id: azure-common._global.isValidUri
    name: isValidUri(uri)
    summary: Creates a anonymous function that check if the given uri is valid or not.
    fullName: azure-common.isValidUri(uri)
    type: Function
    syntax:
      parameters:
        - id: uri
          type:
            - string
          description: The uri to validate.
      return:
        type:
          - function
        description: ''
      content: function isValidUri(uri)
    langs:
      - js
  - uid: azure-common._global.isValidHDInsightCreationObject
    id: azure-common._global.isValidHDInsightCreationObject
    name: isValidHDInsightCreationObject(clusterCreationObject)
    summary: Validates that a clusterCreationObject is properly formed.
    fullName: azure-common.isValidHDInsightCreationObject(clusterCreationObject)
    type: Function
    syntax:
      parameters:
        - id: clusterCreationObject
          type:
            - object
          description: "The object used to supply all parameters needed to create a cluster.\r                                                  {\r                                                    // the following are required fields\r                                                    name: 'the name of the cluster (dns name) all lower case',\r                                                    location: 'the Azure data center where the cluster is to be created',\r                                                    defaultStorageAccountName: 'The name of the default Azure storage account',\r                                                    defaultStorageAccountKey: 'The secret key for the default Azure storage account',\r                                                    defaultStorageContainer: 'The container for the default Azure storage account',\r                                                    user: 'The username to use for the cluster',\r                                                    password: 'The password to use for the cluster',\r                                                    nodes: number // The number of nodes to use\r                                                    // the following are optional fields\r                                                    additionalStorageAccounts : [ {\r                                                        name: 'the name of the storage acount'\r                                                        key: 'the secret key for the storage acount'\r                                                      }, { // additional accounts following the same pattern }\r                                                    ]\r                                                    // the following are optional but if one is specified the other is required\r                                                    oozieMetastore : {\r                                                      server : 'the name of the sql server to use',\r                                                      database : 'the sql databse to use'\r                                                      user : 'the user name to use when logging into the database'\r                                                      password : 'the password to use when logging into the database'\r                                                    }\r                                                    hiveMetastore : {\r                                                      server : 'the name of the sql server to use',\r                                                      database : 'the sql databse to use'\r                                                      user : 'the user name to use when logging into the database'\r                                                      password : 'the password to use when logging into the database'\r                                                    }\r                                                  }"
      content: function isValidHDInsightCreationObject(clusterCreationObject)
    langs:
      - js
  - uid: azure-common._global.isBase64Encoded
    id: azure-common._global.isBase64Encoded
    name: isBase64Encoded(key)
    summary: Creates a anonymous function that check if a given key is base 64 encoded.
    fullName: azure-common.isBase64Encoded(key)
    type: Function
    syntax:
      parameters:
        - id: key
          type:
            - string
          description: The key to validate.
      return:
        type:
          - function
        description: ''
      content: function isBase64Encoded(key)
    langs:
      - js
  - uid: azure-common._global.isValidFunction
    id: azure-common._global.isValidFunction
    name: isValidFunction(function)
    summary: Validates a function.
    fullName: azure-common.isValidFunction(function)
    type: Function
    syntax:
      parameters:
        - id: function
          type:
            - object
          description: The function to validate.
      return:
        type:
          - function
        description: ''
      content: function isValidFunction(function)
    langs:
      - js
  - uid: azure-common._global.namespaceNameIsValid
    id: azure-common._global.namespaceNameIsValid
    name: namespaceNameIsValid(name)
    summary: "Validates that a Service Bus namespace name\ris legally allowable. Does not check availability."
    fullName: azure-common.namespaceNameIsValid(name)
    type: Function
    syntax:
      parameters:
        - id: name
          type:
            - string
          description: the name to check
      return:
        description: "nothing. Throws exception if name is invalid, message\r                 describes what validity criteria it violates."
      content: function namespaceNameIsValid(name)
    langs:
      - js
  - uid: azure-common._global.containerNameIsValid
    id: azure-common._global.containerNameIsValid
    name: containerNameIsValid(containerName)
    summary: Validates a container name.
    fullName: azure-common.containerNameIsValid(containerName)
    type: Function
    syntax:
      parameters:
        - id: containerName
          type:
            - string
          description: The container name.
      return:
        type:
          - undefined
        description: ''
      content: function containerNameIsValid(containerName)
    langs:
      - js
  - uid: azure-common._global.blobNameIsValid
    id: azure-common._global.blobNameIsValid
    name: 'blobNameIsValid(containerName, blobname)'
    summary: Validates a blob name.
    fullName: 'azure-common.blobNameIsValid(containerName, blobname)'
    type: Function
    syntax:
      parameters:
        - id: containerName
          type:
            - string
          description: The container name.
        - id: blobname
          type:
            - string
          description: The blob name.
      return:
        type:
          - undefined
        description: ''
      content: 'function blobNameIsValid(containerName, blobname)'
    langs:
      - js
  - uid: azure-common._global.tableNameIsValid
    id: azure-common._global.tableNameIsValid
    name: tableNameIsValid(table)
    summary: Validates a table name.
    fullName: azure-common.tableNameIsValid(table)
    type: Function
    syntax:
      parameters:
        - id: table
          type:
            - string
          description: The table name.
      return:
        type:
          - undefined
        description: ''
      content: function tableNameIsValid(table)
    langs:
      - js
  - uid: azure-common._global.queueNameIsValid
    id: azure-common._global.queueNameIsValid
    name: queueNameIsValid(queue)
    summary: Validates a queue name.
    fullName: azure-common.queueNameIsValid(queue)
    type: Function
    syntax:
      parameters:
        - id: queue
          type:
            - string
          description: The queue name.
      return:
        type:
          - undefined
        description: ''
      content: function queueNameIsValid(queue)
    langs:
      - js
