### YamlMime:UniversalReference
items:
  - uid: azure-storage.global
    id: azure-storage.global
    name: GLOBAL
    fullName: GLOBAL
    type: Class
    langs:
      - js
    children:
      - azure-storage._global.generateDevelopmentStorageCredentials
      - azure-storage._global.createTableService
      - azure-storage._global.createTableServiceWithSas
      - azure-storage._global.createBlobService
      - azure-storage._global.createBlobServiceWithSas
      - azure-storage._global.createBlobServiceAnonymous
      - azure-storage._global.createFileService
      - azure-storage._global.createFileServiceWithSas
      - azure-storage._global.createQueueService
      - azure-storage._global.createQueueServiceWithSas
      - azure-storage._global.generateAccountSharedAccessSignature
      - azure-storage._global.serialize
      - azure-storage._global.DEFAULT_PROTOCOL
      - azure-storage._global.noMatchConnectionString
      - azure-storage._global.noMatchSettings
      - azure-storage._global.parseAndValidateKeys
      - azure-storage._global.getValidator
      - azure-storage._global.setting
      - azure-storage._global.atLeastOne
      - azure-storage._global.optional
      - azure-storage._global.allRequired
      - azure-storage._global.settingWithFunc
      - azure-storage._global.matchedSpecification
      - azure-storage._global.generateEmptyCondition
      - azure-storage._global.generateIfNotExistsCondition
      - azure-storage._global.generateIfExistsCondition
      - azure-storage._global.generateIfNoneMatchCondition
      - azure-storage._global.generateIfMatchCondition
      - azure-storage._global.generateIfModifiedSinceCondition
      - azure-storage._global.generateIfNotModifiedSinceCondition
      - azure-storage._global.generateSequenceNumberEqualCondition
      - azure-storage._global.generateSequenceNumberLessThanCondition
      - azure-storage._global.generateSequenceNumberLessThanOrEqualCondition
      - azure-storage._global.format
      - azure-storage._global.parse
      - azure-storage._global.trimPortFromUri
      - azure-storage._global.objectKeysLength
      - azure-storage._global.isBrowser
      - azure-storage._global.isIE
      - azure-storage._global.is32
      - azure-storage._global.objectIsNull
      - azure-storage._global.objectIsEmpty
      - azure-storage._global.objectIsInt
      - azure-storage._global.objectIsNaN
      - azure-storage._global.objectIsString
      - azure-storage._global.objectIsFunction
      - azure-storage._global.zeroPaddingString
      - azure-storage._global.stringIsEmpty
      - azure-storage._global.IsNullOrEmptyOrUndefinedOrWhiteSpace
      - azure-storage._global.stringFormat
      - azure-storage._global.stringStartsWith
      - azure-storage._global.stringEndsWith
      - azure-storage._global.removeBOM
      - azure-storage._global.merge
      - azure-storage._global.inArrayInsensitive
      - azure-storage._global.tryGetValueInsensitive
      - azure-storage._global.tryGetValueChain
      - azure-storage._global.setObjectInnerPropertyValue
      - azure-storage._global.truncatedISO8061Date
      - azure-storage._global.calculateMD5
      - azure-storage._global.isBufferAllZero
      - azure-storage._global.getContentMd5
      - azure-storage._global.parseCopyProgress
      - azure-storage._global.normalizePropertyNameFromXML
      - azure-storage._global.setPropertyValueFromXML
      - azure-storage._global.filterOutNonReservedProperties
      - azure-storage._global.isValidEnumValue
      - azure-storage._global.isValidUri
      - azure-storage._global.isValidHost
      - azure-storage._global.isValidUuid
      - azure-storage._global.isBase64Encoded
      - azure-storage._global.isValidFunction
      - azure-storage._global.containerNameIsValid
      - azure-storage._global.blobNameIsValid
      - azure-storage._global.blobTierNameIsValid
      - azure-storage._global.shareNameIsValid
      - azure-storage._global.queueNameIsValid
      - azure-storage._global.tableNameIsValid
      - azure-storage._global.browserFileIsValid
      - azure-storage._global.pageRangesAreValid
      - azure-storage._global.blobTypeIsValid
      - azure-storage._global.shareACLIsValid
      - azure-storage._global.shareQuotaIsValid
      - azure-storage._global.propertyType
      - azure-storage._global.deserializeValueFromJson
      - azure-storage._global.serializeValue
      - azure-storage._global.serializeQueryValue
      - azure-storage._global.constructEntityWebResource
      - azure-storage._global.setTableRequestHeadersAndBody
  - uid: azure-storage._global.generateDevelopmentStorageCredentials
    id: azure-storage._global.generateDevelopmentStorageCredentials
    name: generateDevelopmentStorageCredentials(proxyUri)
    summary: >-
      Creates a connection string that can be used to create a service which
      runs on the storage emulator. The emulator must be downloaded separately.
    fullName: azure-storage.generateDevelopmentStorageCredentials(proxyUri)
    type: Function
    syntax:
      parameters:
        - id: proxyUri
          type:
            - string
          description: 'The proxyUri. By default, http://127.0.0.1'
          optional: true
      return:
        type:
          - string
        description: A connection string representing the development storage credentials.
      content: function generateDevelopmentStorageCredentials(proxyUri)
    langs:
      - js
  - uid: azure-storage._global.createTableService
    id: azure-storage._global.createTableService
    name: >-
      createTableService(storageAccountOrConnectionString, storageAccessKey,
      host)
    summary: "Creates a new <xref:azure-storage.TableService> object.\rIf no storageaccount or storageaccesskey are provided, the AZURE_STORAGE_CONNECTION_STRING and then the AZURE_STORAGE_ACCOUNT and AZURE_STORAGE_ACCESS_KEY \renvironment variables will be used."
    fullName: >-
      azure-storage.createTableService(storageAccountOrConnectionString,
      storageAccessKey, host)
    type: Function
    syntax:
      parameters:
        - id: storageAccountOrConnectionString
          type:
            - string
          description: The storage account or the connection string.
          optional: true
        - id: storageAccessKey
          type:
            - string
          description: The storage access key.
          optional: true
        - id: host
          type:
            - string
            - object
          description: "The host address. To define primary only, pass a string. \r                                                    Otherwise 'host.primaryHost' defines the primary host and 'host.secondaryHost' defines the secondary host."
          optional: true
      return:
        type:
          - azure-storage.TableService
        description: A new TableService object.
      content: >-
        function createTableService(storageAccountOrConnectionString,
        storageAccessKey, host)
    langs:
      - js
  - uid: azure-storage._global.createTableServiceWithSas
    id: azure-storage._global.createTableServiceWithSas
    name: 'createTableServiceWithSas(host, sasToken)'
    summary: >-
      Creates a new <xref:azure-storage.TableService> object using the host Uri
      and the SAS credentials provided.
    fullName: 'azure-storage.createTableServiceWithSas(host, sasToken)'
    type: Function
    syntax:
      parameters:
        - id: host
          type:
            - string
            - object
          description: "The host address. To define primary only, pass a string. \r                                                    Otherwise 'host.primaryHost' defines the primary host and 'host.secondaryHost' defines the secondary host."
        - id: sasToken
          type:
            - string
          description: The Shared Access Signature token.
      return:
        type:
          - azure-storage.TableService
        description: A new TableService object with the SAS credentials.
      content: 'function createTableServiceWithSas(host, sasToken)'
    langs:
      - js
  - uid: azure-storage._global.createBlobService
    id: azure-storage._global.createBlobService
    name: >-
      createBlobService(storageAccountOrConnectionString, storageAccessKey,
      host)
    summary: "Creates a new <xref:azure-storage.BlobService> object.\rIf no storageaccount or storageaccesskey are provided, the AZURE_STORAGE_CONNECTION_STRING and then the AZURE_STORAGE_ACCOUNT and AZURE_STORAGE_ACCESS_KEY \renvironment variables will be used."
    fullName: >-
      azure-storage.createBlobService(storageAccountOrConnectionString,
      storageAccessKey, host)
    type: Function
    syntax:
      parameters:
        - id: storageAccountOrConnectionString
          type:
            - string
          description: The storage account or the connection string.
        - id: storageAccessKey
          type:
            - string
          description: The storage access key.
          optional: true
        - id: host
          type:
            - string
            - object
          description: "The host address. To define primary only, pass a string. \r                                                    Otherwise 'host.primaryHost' defines the primary host and 'host.secondaryHost' defines the secondary host."
          optional: true
      return:
        type:
          - azure-storage.BlobService
        description: A new BlobService object.
      content: >-
        function createBlobService(storageAccountOrConnectionString,
        storageAccessKey, host)
    langs:
      - js
  - uid: azure-storage._global.createBlobServiceWithSas
    id: azure-storage._global.createBlobServiceWithSas
    name: 'createBlobServiceWithSas(host, sasToken)'
    summary: >-
      Creates a new <xref:azure-storage.BlobService> object using the host Uri
      and the SAS credentials provided.
    fullName: 'azure-storage.createBlobServiceWithSas(host, sasToken)'
    type: Function
    syntax:
      parameters:
        - id: host
          type:
            - string
            - object
          description: "The host address. To define primary only, pass a string. \r                                                    Otherwise 'host.primaryHost' defines the primary host and 'host.secondaryHost' defines the secondary host."
        - id: sasToken
          type:
            - string
          description: The Shared Access Signature token.
      return:
        type:
          - azure-storage.BlobService
        description: A new BlobService object with the SAS credentials.
      content: 'function createBlobServiceWithSas(host, sasToken)'
    langs:
      - js
  - uid: azure-storage._global.createBlobServiceAnonymous
    id: azure-storage._global.createBlobServiceAnonymous
    name: createBlobServiceAnonymous(host)
    summary: >-
      Creates a new <xref:azure-storage.BlobService> object using the host uri
      and anonymous access.
    fullName: azure-storage.createBlobServiceAnonymous(host)
    type: Function
    syntax:
      parameters:
        - id: host
          type:
            - string
            - object
          description: "The host address. To define primary only, pass a string. \r                                                    Otherwise 'host.primaryHost' defines the primary host and 'host.secondaryHost' defines the secondary host."
      return:
        type:
          - azure-storage.BlobService
        description: A new BlobService object with the anonymous credentials.
      content: function createBlobServiceAnonymous(host)
    langs:
      - js
  - uid: azure-storage._global.createFileService
    id: azure-storage._global.createFileService
    name: >-
      createFileService(storageAccountOrConnectionString, storageAccessKey,
      host)
    summary: "Creates a new <xref:azure-storage.FileService> object.\rIf no storageaccount or storageaccesskey are provided, the AZURE_STORAGE_CONNECTION_STRING and then the AZURE_STORAGE_ACCOUNT and AZURE_STORAGE_ACCESS_KEY \renvironment variables will be used."
    fullName: >-
      azure-storage.createFileService(storageAccountOrConnectionString,
      storageAccessKey, host)
    type: Function
    syntax:
      parameters:
        - id: storageAccountOrConnectionString
          type:
            - string
          description: The storage account or the connection string.
        - id: storageAccessKey
          type:
            - string
          description: The storage access key.
          optional: true
        - id: host
          type:
            - string
            - object
          description: "The host address. To define primary only, pass a string. \r                                                    Otherwise 'host.primaryHost' defines the primary host and 'host.secondaryHost' defines the secondary host."
          optional: true
      return:
        type:
          - azure-storage.FileService
        description: A new FileService object.
      content: >-
        function createFileService(storageAccountOrConnectionString,
        storageAccessKey, host)
    langs:
      - js
  - uid: azure-storage._global.createFileServiceWithSas
    id: azure-storage._global.createFileServiceWithSas
    name: 'createFileServiceWithSas(host, sasToken)'
    summary: >-
      Creates a new <xref:azure-storage.FileService> object using the host Uri
      and the SAS credentials provided.
    fullName: 'azure-storage.createFileServiceWithSas(host, sasToken)'
    type: Function
    syntax:
      parameters:
        - id: host
          type:
            - string
            - object
          description: "The host address. To define primary only, pass a string. \r                                                    Otherwise 'host.primaryHost' defines the primary host and 'host.secondaryHost' defines the secondary host."
        - id: sasToken
          type:
            - string
          description: The Shared Access Signature token.
      return:
        type:
          - azure-storage.FileService
        description: A new FileService object with the SAS credentials.
      content: 'function createFileServiceWithSas(host, sasToken)'
    langs:
      - js
  - uid: azure-storage._global.createQueueService
    id: azure-storage._global.createQueueService
    name: >-
      createQueueService(storageAccountOrConnectionString, storageAccessKey,
      host)
    summary: "Creates a new <xref:azure-storage.QueueService> object.\rIf no storageaccount or storageaccesskey are provided, the AZURE_STORAGE_CONNECTION_STRING and then the AZURE_STORAGE_ACCOUNT and AZURE_STORAGE_ACCESS_KEY \renvironment variables will be used."
    fullName: >-
      azure-storage.createQueueService(storageAccountOrConnectionString,
      storageAccessKey, host)
    type: Function
    syntax:
      parameters:
        - id: storageAccountOrConnectionString
          type:
            - string
          description: The storage account or the connection string.
          optional: true
        - id: storageAccessKey
          type:
            - string
          description: The storage access key.
          optional: true
        - id: host
          type:
            - string
            - object
          description: "The host address. To define primary only, pass a string. \r                                                    Otherwise 'host.primaryHost' defines the primary host and 'host.secondaryHost' defines the secondary host."
          optional: true
      return:
        type:
          - azure-storage.QueueService
        description: A new QueueService object.
      content: >-
        function createQueueService(storageAccountOrConnectionString,
        storageAccessKey, host)
    langs:
      - js
  - uid: azure-storage._global.createQueueServiceWithSas
    id: azure-storage._global.createQueueServiceWithSas
    name: 'createQueueServiceWithSas(host, sasToken)'
    summary: >-
      Creates a new <xref:azure-storage.QueueService> object using the host Uri
      and the SAS credentials provided.
    fullName: 'azure-storage.createQueueServiceWithSas(host, sasToken)'
    type: Function
    syntax:
      parameters:
        - id: host
          type:
            - string
            - object
          description: "The host address. To define primary only, pass a string. \r                                                    Otherwise 'host.primaryHost' defines the primary host and 'host.secondaryHost' defines the secondary host."
        - id: sasToken
          type:
            - string
          description: The Shared Access Signature token.
      return:
        type:
          - azure-storage.QueueService
        description: A new QueueService object with the SAS credentials.
      content: 'function createQueueServiceWithSas(host, sasToken)'
    langs:
      - js
  - uid: azure-storage._global.generateAccountSharedAccessSignature
    id: azure-storage._global.generateAccountSharedAccessSignature
    name: >-
      generateAccountSharedAccessSignature(storageAccountOrConnectionString,
      storageAccessKey, sharedAccessPolicy)
    summary: Generates an account shared access signature token
    fullName: >-
      azure-storage.generateAccountSharedAccessSignature(storageAccountOrConnectionString,
      storageAccessKey, sharedAccessPolicy)
    type: Function
    syntax:
      parameters:
        - id: storageAccountOrConnectionString
          type:
            - string
          description: The storage account or the connection string.
          optional: true
        - id: storageAccessKey
          type:
            - string
          description: The storage access key.
          optional: true
        - id: sharedAccessPolicy
          type:
            - object
          description: The shared access policy.
        - id: sharedAccessPolicy.AccessPolicy.Services
          type:
            - azure-storage.SharedAccessServices
          description: "The services (blob, file, queue, table) for a shared access signature associated with this shared access policy.\r                                                                                      Refer to `Constants.AccountSasConstants.Services`."
        - id: sharedAccessPolicy.AccessPolicy.ResourceTypes
          type:
            - azure-storage.SharedAccessResourceTypes
          description: "The resource type for a shared access signature associated with this shared access policy.\r                                                                                      Refer to `Constants.AccountSasConstants.ResourceTypes`."
        - id: sharedAccessPolicy.AccessPolicy.Permissions
          type:
            - azure-storage.SharedAccessPermissions
          description: "The permissions for a shared access signature. \r                                                                                      Refer to `Constants.AccountSasConstants.Permissions`."
        - id: sharedAccessPolicy.AccessPolicy.Start
          type:
            - date
          description: The time at which the Shared Access Signature becomes valid.
        - id: sharedAccessPolicy.AccessPolicy.Expiry
          type:
            - date
          description: The time at which the Shared Access Signature becomes expired.
        - id: sharedAccessPolicy.AccessPolicy.IPAddressOrRange
          type:
            - string
          description: >-
            The permission type. Refer to
            `Constants.AccountSasConstants.ResourceTypes`.
        - id: sharedAccessPolicy.AccessPolicy.Protocols
          type:
            - string
          description: >-
            The possible protocols. Refer to
            `Constants.AccountSasConstants.ResourceTypes`.
      content: >-
        function
        generateAccountSharedAccessSignature(storageAccountOrConnectionString,
        storageAccessKey, sharedAccessPolicy)
    langs:
      - js
  - uid: azure-storage._global.serialize
    id: azure-storage._global.serialize
    name: serialize(entity)
    summary: Builds an XML representation for container acl permissions.
    fullName: azure-storage.serialize(entity)
    type: Function
    syntax:
      parameters:
        - id: entity
          type:
            - 'azure-storage.Object.<string, AccessPolicy>'
          description: The signed identifiers.
      return:
        type:
          - string
        description: The XML container acl permissions.
      content: function serialize(entity)
    langs:
      - js
  - uid: azure-storage._global.DEFAULT_PROTOCOL
    id: azure-storage._global.DEFAULT_PROTOCOL
    name: DEFAULT_PROTOCOL
    summary: The default protocol.
    fullName: azure-storage.DEFAULT_PROTOCOL
    type: Member
    syntax:
      content: DEFAULT_PROTOCOL
    langs:
      - js
  - uid: azure-storage._global.noMatchConnectionString
    id: azure-storage._global.noMatchConnectionString
    name: noMatchConnectionString(connectionString)
    summary: "Throws an exception if the connection string format does not match any of the\ravailable formats."
    fullName: azure-storage.noMatchConnectionString(connectionString)
    type: Function
    syntax:
      parameters:
        - id: connectionString
          type:
            - string
          description: The invalid formatted connection string.
      return:
        description: none
      content: function noMatchConnectionString(connectionString)
    langs:
      - js
  - uid: azure-storage._global.noMatchSettings
    id: azure-storage._global.noMatchSettings
    name: noMatchSettings(settings)
    summary: "Throws an exception if the settings dont match any of the\ravailable formats."
    fullName: azure-storage.noMatchSettings(settings)
    type: Function
    syntax:
      parameters:
        - id: settings
          type:
            - object
          description: The invalid settings.
      return:
        description: none
      content: function noMatchSettings(settings)
    langs:
      - js
  - uid: azure-storage._global.parseAndValidateKeys
    id: azure-storage._global.parseAndValidateKeys
    name: 'parseAndValidateKeys(connectionString, validKeys)'
    summary: "Parses the connection string and then validate that the parsed keys belong to\rthe validSettingKeys"
    fullName: 'azure-storage.parseAndValidateKeys(connectionString, validKeys)'
    type: Function
    syntax:
      parameters:
        - id: connectionString
          type:
            - string
          description: The user provided connection string.
        - id: validKeys
          type:
            - array
          description: The valid keys.
      return:
        type:
          - array
        description: The tokenized connection string keys.
      content: 'function parseAndValidateKeys(connectionString, validKeys)'
    langs:
      - js
  - uid: azure-storage._global.getValidator
    id: azure-storage._global.getValidator
    name: 'getValidator(array, boolean, boolean)'
    summary: >-
      Creates an anonymous function that acts as predicate to perform a
      validation.
    fullName: 'azure-storage.getValidator(array, boolean, boolean)'
    type: Function
    syntax:
      parameters:
        - id: array
          type:
            - azure-storage.requirements
          description: The array of conditions to satisfy.
        - id: boolean
          type:
            - azure-storage.isRequired
          description: "Either these conditions are all required or all\roptional."
        - id: boolean
          type:
            - azure-storage.atLeastOne
          description: "Indicates that at least one requirement must\rsucceed."
      return:
        type:
          - function
        description: ''
      content: 'function getValidator(array, boolean, boolean)'
    langs:
      - js
  - uid: azure-storage._global.setting
    id: azure-storage._global.setting
    name: setting(name)
    summary: "Creates a setting value condition that validates it is one of the\rpassed valid values."
    fullName: azure-storage.setting(name)
    type: Function
    syntax:
      parameters:
        - id: name
          type:
            - string
          description: The setting key name.
      return:
        type:
          - array
        description: ''
      content: function setting(name)
    langs:
      - js
  - uid: azure-storage._global.atLeastOne
    id: azure-storage._global.atLeastOne
    name: atLeastOne()
    summary: Creates an "at lease one" predicate for the provided list of requirements.
    fullName: azure-storage.atLeastOne()
    type: Function
    syntax:
      return:
        description: callable
      content: function atLeastOne()
    langs:
      - js
  - uid: azure-storage._global.optional
    id: azure-storage._global.optional
    name: optional()
    summary: Creates an optional predicate for the provided list of requirements.
    fullName: azure-storage.optional()
    type: Function
    syntax:
      return:
        type:
          - function
        description: ''
      content: function optional()
    langs:
      - js
  - uid: azure-storage._global.allRequired
    id: azure-storage._global.allRequired
    name: allRequired()
    summary: Creates an required predicate for the provided list of requirements.
    fullName: azure-storage.allRequired()
    type: Function
    syntax:
      return:
        type:
          - function
        description: ''
      content: function allRequired()
    langs:
      - js
  - uid: azure-storage._global.settingWithFunc
    id: azure-storage._global.settingWithFunc
    name: 'settingWithFunc(name, predicate)'
    summary: Creates a setting value condition using the passed predicate.
    fullName: 'azure-storage.settingWithFunc(name, predicate)'
    type: Function
    syntax:
      parameters:
        - id: name
          type:
            - string
          description: The setting key name.
        - id: predicate
          type:
            - function
          description: The setting value predicate.
      return:
        type:
          - array
        description: ''
      content: 'function settingWithFunc(name, predicate)'
    langs:
      - js
  - uid: azure-storage._global.matchedSpecification
    id: azure-storage._global.matchedSpecification
    name: matchedSpecification(array)
    summary: Tests to see if a given list of settings matches a set of filters exactly.
    fullName: azure-storage.matchedSpecification(array)
    type: Function
    syntax:
      parameters:
        - id: array
          description: $settings The settings to check.
      return:
        description: "boolean If any filter returns null, false. If there are any settings\rleft over after all filters are processed, false. Otherwise true."
      content: function matchedSpecification(array)
    langs:
      - js
  - uid: azure-storage._global.generateEmptyCondition
    id: azure-storage._global.generateEmptyCondition
    name: generateEmptyCondition()
    summary: Constructs an empty access condition.
    fullName: azure-storage.generateEmptyCondition()
    type: Function
    syntax:
      return:
        type:
          - object
        description: An empty AccessCondition object
      content: function generateEmptyCondition()
    langs:
      - js
  - uid: azure-storage._global.generateIfNotExistsCondition
    id: azure-storage._global.generateIfNotExistsCondition
    name: generateIfNotExistsCondition()
    summary: "Constructs an access condition such that an operation will be performed only if the resource does not exist on the service\r\rSetting this access condition modifies the request to include the HTTP If-None-Match conditional header"
    fullName: azure-storage.generateIfNotExistsCondition()
    type: Function
    syntax:
      return:
        type:
          - azure-storage.AccessConditions
        description: >-
          An AccessCondition object that represents a condition that checks for
          nonexistence
      content: function generateIfNotExistsCondition()
    langs:
      - js
  - uid: azure-storage._global.generateIfExistsCondition
    id: azure-storage._global.generateIfExistsCondition
    name: generateIfExistsCondition()
    summary: "Constructs an access condition such that an operation will be performed only if the resource exists on the service\r\rSetting this access condition modifies the request to include the HTTP If-Match conditional header"
    fullName: azure-storage.generateIfExistsCondition()
    type: Function
    syntax:
      return:
        type:
          - azure-storage.AccessConditions
        description: >-
          An AccessCondition object that represents a condition that checks for
          existence
      content: function generateIfExistsCondition()
    langs:
      - js
  - uid: azure-storage._global.generateIfNoneMatchCondition
    id: azure-storage._global.generateIfNoneMatchCondition
    name: generateIfNoneMatchCondition(etag)
    summary: "Constructs an access condition such that an operation will be performed only if the resource's ETag value \rdoes not match the specified ETag value\r\rSetting this access condition modifies the request to include the HTTP If-None-Match conditional header"
    fullName: azure-storage.generateIfNoneMatchCondition(etag)
    type: Function
    syntax:
      parameters:
        - id: etag
          type:
            - string
          description: The ETag value to check against the resource's ETag
      return:
        type:
          - azure-storage.AccessConditions
        description: An AccessCondition object that represents the If-None-Match condition
      content: function generateIfNoneMatchCondition(etag)
    langs:
      - js
  - uid: azure-storage._global.generateIfMatchCondition
    id: azure-storage._global.generateIfMatchCondition
    name: generateIfMatchCondition(etag)
    summary: "Constructs an access condition such that an operation will be performed only if the resource's ETag value\rmatches the specified ETag value\r\rSetting this access condition modifies the request to include the HTTP If-Match conditional header"
    fullName: azure-storage.generateIfMatchCondition(etag)
    type: Function
    syntax:
      parameters:
        - id: etag
          type:
            - string
          description: The ETag value to check against the resource's ETag
      return:
        type:
          - azure-storage.AccessConditions
        description: An AccessCondition object that represents the If-Match condition
      content: function generateIfMatchCondition(etag)
    langs:
      - js
  - uid: azure-storage._global.generateIfModifiedSinceCondition
    id: azure-storage._global.generateIfModifiedSinceCondition
    name: generateIfModifiedSinceCondition(time)
    summary: "Constructs an access condition such that an operation will be performed only if the resource has been\rmodified since the specified time\r\rSetting this access condition modifies the request to include the HTTP If-Modified-Since conditional header"
    fullName: azure-storage.generateIfModifiedSinceCondition(time)
    type: Function
    syntax:
      parameters:
        - id: time
          type:
            - Date
            - string
          description: >-
            A date object specifying the time since which the resource must have
            been modified
      return:
        type:
          - azure-storage.AccessConditions
        description: >-
          An AccessCondition object that represents the If-Modified-Since
          condition
      content: function generateIfModifiedSinceCondition(time)
    langs:
      - js
  - uid: azure-storage._global.generateIfNotModifiedSinceCondition
    id: azure-storage._global.generateIfNotModifiedSinceCondition
    name: generateIfNotModifiedSinceCondition(time)
    summary: "Constructs an access condition such that an operation will be performed only if the resource has not been\rmodified since the specified time\r\rSetting this access condition modifies the request to include the HTTP If-Unmodified-Since conditional header"
    fullName: azure-storage.generateIfNotModifiedSinceCondition(time)
    type: Function
    syntax:
      parameters:
        - id: time
          type:
            - Date
            - string
          description: >-
            A date object specifying the time since which the resource must have
            not been modified
      return:
        type:
          - azure-storage.AccessConditions
        description: >-
          An AccessCondition object that represents the If-Unmodified-Since
          condition
      content: function generateIfNotModifiedSinceCondition(time)
    langs:
      - js
  - uid: azure-storage._global.generateSequenceNumberEqualCondition
    id: azure-storage._global.generateSequenceNumberEqualCondition
    name: generateSequenceNumberEqualCondition(sequenceNumber)
    summary: "Constructs an access condition such that an operation will be performed only if the resource's sequence number\ris equal to the specified value\r\rSetting this access condition modifies the request to include the HTTP x-ms-if-sequence-number-eq conditional header"
    fullName: azure-storage.generateSequenceNumberEqualCondition(sequenceNumber)
    type: Function
    syntax:
      parameters:
        - id: sequenceNumber
          type:
            - Number
            - string
          description: >-
            A date object specifying the time since which the resource must have
            not been modified
      return:
        type:
          - azure-storage.AccessConditions
        description: >-
          An AccessCondition object that represents the If-Unmodified-Since
          condition
      content: function generateSequenceNumberEqualCondition(sequenceNumber)
    langs:
      - js
  - uid: azure-storage._global.generateSequenceNumberLessThanCondition
    id: azure-storage._global.generateSequenceNumberLessThanCondition
    name: generateSequenceNumberLessThanCondition(sequenceNumber)
    summary: "Constructs an access condition such that an operation will be performed only if the resource's sequence number\ris less than the specified value\r\rSetting this access condition modifies the request to include the HTTP x-ms-if-sequence-number-lt conditional header"
    fullName: azure-storage.generateSequenceNumberLessThanCondition(sequenceNumber)
    type: Function
    syntax:
      parameters:
        - id: sequenceNumber
          type:
            - Number
            - string
          description: >-
            A date object specifying the time since which the resource must have
            not been modified
      return:
        type:
          - azure-storage.AccessConditions
        description: >-
          An AccessCondition object that represents the If-Unmodified-Since
          condition
      content: function generateSequenceNumberLessThanCondition(sequenceNumber)
    langs:
      - js
  - uid: azure-storage._global.generateSequenceNumberLessThanOrEqualCondition
    id: azure-storage._global.generateSequenceNumberLessThanOrEqualCondition
    name: generateSequenceNumberLessThanOrEqualCondition(sequenceNumber)
    summary: "Constructs an access condition such that an operation will be performed only if the resource's sequence number\ris less than or equal to the specified value\r\rSetting this access condition modifies the request to include the HTTP x-ms-if-sequence-number-le conditional header"
    fullName: >-
      azure-storage.generateSequenceNumberLessThanOrEqualCondition(sequenceNumber)
    type: Function
    syntax:
      parameters:
        - id: sequenceNumber
          type:
            - Number
            - string
          description: >-
            A date object specifying the time since which the resource must have
            not been modified
      return:
        type:
          - azure-storage.AccessConditions
        description: >-
          An AccessCondition object that represents the If-Unmodified-Since
          condition
      content: function generateSequenceNumberLessThanOrEqualCondition(sequenceNumber)
    langs:
      - js
  - uid: azure-storage._global.format
    id: azure-storage._global.format
    name: 'format(date, skipMilliseconds, millisecondsPading)'
    summary: Formats a date into an iso 8061 string.
    fullName: 'azure-storage.format(date, skipMilliseconds, millisecondsPading)'
    type: Function
    syntax:
      parameters:
        - id: date
          type:
            - date
          description: The date to format.
        - id: skipMilliseconds
          type:
            - azure-storage.bool
          description: >-
            Boolean value indicating if the miliseconds part of the date should
            not be included.
        - id: millisecondsPading
          type:
            - azure-storage.integer
          description: Number of digits to left pad the miliseconds.
      return:
        type:
          - string
        description: The date formated in the ISO 8061 date format.
      content: 'function format(date, skipMilliseconds, millisecondsPading)'
    langs:
      - js
  - uid: azure-storage._global.parse
    id: azure-storage._global.parse
    name: parse(stringDateTime)
    summary: Parses an ISO 8061 date string into a date object.
    fullName: azure-storage.parse(stringDateTime)
    type: Function
    syntax:
      parameters:
        - id: stringDateTime
          type:
            - string
          description: The string with the date to parse in the ISO 8061 format.
      return:
        type:
          - date
        description: The parsed date.
      content: function parse(stringDateTime)
    langs:
      - js
  - uid: azure-storage._global.trimPortFromUri
    id: azure-storage._global.trimPortFromUri
    name: trimPortFromUri(uri)
    summary: Trim the default port in the url.
    fullName: azure-storage.trimPortFromUri(uri)
    type: Function
    syntax:
      parameters:
        - id: uri
          type:
            - string
          description: The URI to be encoded.
      return:
        type:
          - string
        description: The URI without defualt port.
      content: function trimPortFromUri(uri)
    langs:
      - js
  - uid: azure-storage._global.objectKeysLength
    id: azure-storage._global.objectKeysLength
    name: objectKeysLength(value)
    summary: Returns the number of keys (properties) in an object.
    fullName: azure-storage.objectKeysLength(value)
    type: Function
    syntax:
      parameters:
        - id: value
          type:
            - object
          description: The object which keys are to be counted.
      return:
        type:
          - number
        description: The number of keys in the object.
      content: function objectKeysLength(value)
    langs:
      - js
  - uid: azure-storage._global.isBrowser
    id: azure-storage._global.isBrowser
    name: isBrowser()
    summary: Checks if in a browser environment.
    fullName: azure-storage.isBrowser()
    type: Function
    syntax:
      return:
        type:
          - azure-storage.bool
        description: 'True if in a browser environment, false otherwise.'
      content: function isBrowser()
    langs:
      - js
  - uid: azure-storage._global.isIE
    id: azure-storage._global.isIE
    name: isIE()
    summary: Checks if in IE.
    fullName: azure-storage.isIE()
    type: Function
    syntax:
      return:
        type:
          - azure-storage.bool
        description: 'True if in IE, false otherwise.'
      content: function isIE()
    langs:
      - js
  - uid: azure-storage._global.is32
    id: azure-storage._global.is32
    name: is32()
    summary: Checks if in a 32bit Node.js environment.
    fullName: azure-storage.is32()
    type: Function
    syntax:
      return:
        type:
          - azure-storage.bool
        description: 'True if in a 32bit Node.js environment, false otherwise.'
      content: function is32()
    langs:
      - js
  - uid: azure-storage._global.objectIsNull
    id: azure-storage._global.objectIsNull
    name: objectIsNull(value)
    summary: Checks if a value is null or undefined.
    fullName: azure-storage.objectIsNull(value)
    type: Function
    syntax:
      parameters:
        - id: value
          type:
            - object
          description: The value to check for null or undefined.
      return:
        type:
          - azure-storage.bool
        description: 'True if the value is null or undefined, false otherwise.'
      content: function objectIsNull(value)
    langs:
      - js
  - uid: azure-storage._global.objectIsEmpty
    id: azure-storage._global.objectIsEmpty
    name: objectIsEmpty(object)
    summary: Checks if an object is empty.
    fullName: azure-storage.objectIsEmpty(object)
    type: Function
    syntax:
      parameters:
        - id: object
          type:
            - object
          description: The object to check if it is null.
      return:
        type:
          - azure-storage.bool
        description: 'True if the object is empty, false otherwise.'
      content: function objectIsEmpty(object)
    langs:
      - js
  - uid: azure-storage._global.objectIsInt
    id: azure-storage._global.objectIsInt
    name: objectIsInt(value)
    summary: Determines if an object contains an integer number.
    fullName: azure-storage.objectIsInt(value)
    type: Function
    syntax:
      parameters:
        - id: value
          type:
            - object
          description: The object to assert.
      return:
        type:
          - azure-storage.bool
        description: True if the object contains an integer number; false otherwise.
      content: function objectIsInt(value)
    langs:
      - js
  - uid: azure-storage._global.objectIsNaN
    id: azure-storage._global.objectIsNaN
    name: objectIsNaN(value)
    summary: Determines if an object is a NaN.
    fullName: azure-storage.objectIsNaN(value)
    type: Function
    syntax:
      parameters:
        - id: value
          type:
            - object
          description: The object to assert.
      return:
        type:
          - azure-storage.bool
        description: True if the object is a NaN; false otherwise.
      content: function objectIsNaN(value)
    langs:
      - js
  - uid: azure-storage._global.objectIsString
    id: azure-storage._global.objectIsString
    name: objectIsString(object)
    summary: Checks if an object is a string.
    fullName: azure-storage.objectIsString(object)
    type: Function
    syntax:
      parameters:
        - id: object
          type:
            - object
          description: The object to check if it is a string.
      return:
        type:
          - azure-storage.bool
        description: 'True if the object is a string, false otherwise.'
      content: function objectIsString(object)
    langs:
      - js
  - uid: azure-storage._global.objectIsFunction
    id: azure-storage._global.objectIsFunction
    name: objectIsFunction(object)
    summary: Check if an object is a function
    fullName: azure-storage.objectIsFunction(object)
    type: Function
    syntax:
      parameters:
        - id: object
          type:
            - object
          description: The object to check whether it is function
      return:
        type:
          - azure-storage.bool
        description: 'True if the specified object is function, otherwise false'
      content: function objectIsFunction(object)
    langs:
      - js
  - uid: azure-storage._global.zeroPaddingString
    id: azure-storage._global.zeroPaddingString
    name: zeroPaddingString()
    summary: Front zero padding of string to sepcified length
    fullName: azure-storage.zeroPaddingString()
    type: Function
    syntax:
      content: function zeroPaddingString()
    langs:
      - js
  - uid: azure-storage._global.stringIsEmpty
    id: azure-storage._global.stringIsEmpty
    name: stringIsEmpty(value)
    summary: 'Checks if a value is an empty string, null or undefined.'
    fullName: azure-storage.stringIsEmpty(value)
    type: Function
    syntax:
      parameters:
        - id: value
          type:
            - object
          description: 'The value to check for an empty string, null or undefined.'
      return:
        type:
          - azure-storage.bool
        description: >-
          True if the value is an empty string, null or undefined, false
          otherwise.
      content: function stringIsEmpty(value)
    langs:
      - js
  - uid: azure-storage._global.IsNullOrEmptyOrUndefinedOrWhiteSpace
    id: azure-storage._global.IsNullOrEmptyOrUndefinedOrWhiteSpace
    name: IsNullOrEmptyOrUndefinedOrWhiteSpace(value)
    summary: >-
      Checks if a value is null, empty, undefined or consists only of
      white-space characters.
    fullName: azure-storage.IsNullOrEmptyOrUndefinedOrWhiteSpace(value)
    type: Function
    syntax:
      parameters:
        - id: value
          type:
            - object
          description: >-
            The value to check for null, empty, undefined and white-space only
            characters.
      return:
        type:
          - azure-storage.bool
        description: >-
          True if the value is an empty string, null, undefined, or consists
          only of white-space characters, false otherwise.
      content: function IsNullOrEmptyOrUndefinedOrWhiteSpace(value)
    langs:
      - js
  - uid: azure-storage._global.stringFormat
    id: azure-storage._global.stringFormat
    name: 'stringFormat(text, arguments)'
    summary: Formats a text replacing '?' by the arguments.
    fullName: 'azure-storage.stringFormat(text, arguments)'
    type: Function
    syntax:
      parameters:
        - id: text
          type:
            - string
          description: The string where the ? should be replaced.
        - id: arguments
          type:
            - array
          description: Value(s) to insert in question mark (?) parameters.
      return:
        type:
          - string
        description: ''
      content: 'function stringFormat(text, arguments)'
    langs:
      - js
  - uid: azure-storage._global.stringStartsWith
    id: azure-storage._global.stringStartsWith
    name: 'stringStartsWith(text, prefix)'
    summary: Determines if a string starts with another.
    fullName: 'azure-storage.stringStartsWith(text, prefix)'
    type: Function
    syntax:
      parameters:
        - id: text
          type:
            - string
          description: The string to assert.
        - id: prefix
          type:
            - string
          description: The string prefix.
      return:
        type:
          - azure-storage.Bool
        description: True if the string starts with the prefix; false otherwise.
      content: 'function stringStartsWith(text, prefix)'
    langs:
      - js
  - uid: azure-storage._global.stringEndsWith
    id: azure-storage._global.stringEndsWith
    name: 'stringEndsWith(text, suffix)'
    summary: Determines if a string ends with another.
    fullName: 'azure-storage.stringEndsWith(text, suffix)'
    type: Function
    syntax:
      parameters:
        - id: text
          type:
            - string
          description: The string to assert.
        - id: suffix
          type:
            - string
          description: The string suffix.
      return:
        type:
          - azure-storage.Bool
        description: True if the string ends with the suffix; false otherwise.
      content: 'function stringEndsWith(text, suffix)'
    langs:
      - js
  - uid: azure-storage._global.removeBOM
    id: azure-storage._global.removeBOM
    name: removeBOM(str)
    summary: Removes the BOM from a string.
    fullName: azure-storage.removeBOM(str)
    type: Function
    syntax:
      parameters:
        - id: str
          type:
            - string
          description: The string from where the BOM is to be removed
      return:
        type:
          - string
        description: The string without the BOM.
      content: function removeBOM(str)
    langs:
      - js
  - uid: azure-storage._global.merge
    id: azure-storage._global.merge
    name: merge(object)
    summary: Merges multiple objects.
    fullName: azure-storage.merge(object)
    type: Function
    syntax:
      parameters:
        - id: object
          type:
            - object
          description: The objects to be merged
      return:
        type:
          - object
        description: The merged object.
      content: function merge(object)
    langs:
      - js
  - uid: azure-storage._global.inArrayInsensitive
    id: azure-storage._global.inArrayInsensitive
    name: 'inArrayInsensitive(needle, haystack)'
    summary: "Checks if a value exists in an array. The comparison is done in a case\rinsensitive manner."
    fullName: 'azure-storage.inArrayInsensitive(needle, haystack)'
    type: Function
    syntax:
      parameters:
        - id: needle
          type:
            - string
          description: The searched value.
        - id: haystack
          type:
            - array
          description: The array.
      return:
        type:
          - boolean
        description: ''
      content: 'function inArrayInsensitive(needle, haystack)'
    langs:
      - js
  - uid: azure-storage._global.tryGetValueInsensitive
    id: azure-storage._global.tryGetValueInsensitive
    name: 'tryGetValueInsensitive(key, haystack, default)'
    summary: "Returns the specified value of the key passed from object and in case that\rthis key doesn't exist, the default value is returned. The key matching is\rdone in a case insensitive manner."
    fullName: 'azure-storage.tryGetValueInsensitive(key, haystack, default)'
    type: Function
    syntax:
      parameters:
        - id: key
          type:
            - string
          description: The array key.
        - id: haystack
          type:
            - object
          description: The object to be used.
        - id: default
          type:
            - azure-storage.mix
          description: The value to return if $key is not found in $array.
      return:
        description: mix
      content: 'function tryGetValueInsensitive(key, haystack, default)'
    langs:
      - js
  - uid: azure-storage._global.tryGetValueChain
    id: azure-storage._global.tryGetValueChain
    name: 'tryGetValueChain(object, keys, default)'
    summary: Returns the value in a chained object.
    fullName: 'azure-storage.tryGetValueChain(object, keys, default)'
    type: Function
    syntax:
      parameters:
        - id: object
          type:
            - object
          description: The object with the values.
        - id: keys
          type:
            - array
          description: The keys.
        - id: default
          type:
            - azure-storage.mix
          description: The value to return if $key is not found in $array.
      return:
        description: mix
      content: 'function tryGetValueChain(object, keys, default)'
    langs:
      - js
  - uid: azure-storage._global.setObjectInnerPropertyValue
    id: azure-storage._global.setObjectInnerPropertyValue
    name: 'setObjectInnerPropertyValue(object, keys, object)'
    summary: Set the value of an inner property of an object.
    fullName: 'azure-storage.setObjectInnerPropertyValue(object, keys, object)'
    type: Function
    syntax:
      parameters:
        - id: object
          type:
            - object
          description: The target object.
        - id: keys
          type:
            - array
          description: The property chain keys.
        - id: object
          type:
            - azure-storage.mix
          description: The value to be set.
      content: 'function setObjectInnerPropertyValue(object, keys, object)'
    langs:
      - js
  - uid: azure-storage._global.truncatedISO8061Date
    id: azure-storage._global.truncatedISO8061Date
    name: truncatedISO8061Date(a)
    summary: Rounds a date off to seconds.
    fullName: azure-storage.truncatedISO8061Date(a)
    type: Function
    syntax:
      parameters:
        - id: a
          type:
            - Date
          description: date
      return:
        type:
          - string
        description: 'the date in ISO8061 format, with no milliseconds component'
      content: function truncatedISO8061Date(a)
    langs:
      - js
  - uid: azure-storage._global.calculateMD5
    id: azure-storage._global.calculateMD5
    name: calculateMD5()
    summary: Calculate md5sum for the stream
    fullName: azure-storage.calculateMD5()
    type: Function
    syntax:
      content: function calculateMD5()
    langs:
      - js
  - uid: azure-storage._global.isBufferAllZero
    id: azure-storage._global.isBufferAllZero
    name: isBufferAllZero()
    summary: Whether the content of buffer is all zero
    fullName: azure-storage.isBufferAllZero()
    type: Function
    syntax:
      content: function isBufferAllZero()
    langs:
      - js
  - uid: azure-storage._global.getContentMd5
    id: azure-storage._global.getContentMd5
    name: getContentMd5()
    summary: Calculate md5sum for the content
    fullName: azure-storage.getContentMd5()
    type: Function
    syntax:
      content: function getContentMd5()
    langs:
      - js
  - uid: azure-storage._global.parseCopyProgress
    id: azure-storage._global.parseCopyProgress
    name: parseCopyProgress()
    summary: Parse copy progress string in the format of bytesCopied/totalBytes
    fullName: azure-storage.parseCopyProgress()
    type: Function
    syntax:
      content: function parseCopyProgress()
    langs:
      - js
  - uid: azure-storage._global.normalizePropertyNameFromXML
    id: azure-storage._global.normalizePropertyNameFromXML
    name: normalizePropertyNameFromXML()
    summary: "Normalize the property name from XML to keep consistent with \rthe name defined in the property headers"
    fullName: azure-storage.normalizePropertyNameFromXML()
    type: Function
    syntax:
      content: function normalizePropertyNameFromXML()
    langs:
      - js
  - uid: azure-storage._global.setPropertyValueFromXML
    id: azure-storage._global.setPropertyValueFromXML
    name: setPropertyValueFromXML()
    summary: Set the property value from XML
    fullName: azure-storage.setPropertyValueFromXML()
    type: Function
    syntax:
      content: function setPropertyValueFromXML()
    langs:
      - js
  - uid: azure-storage._global.filterOutNonReservedProperties
    id: azure-storage._global.filterOutNonReservedProperties
    name: filterOutNonReservedProperties()
    summary: Filter out non-reserved properties from options
    fullName: azure-storage.filterOutNonReservedProperties()
    type: Function
    syntax:
      content: function filterOutNonReservedProperties()
    langs:
      - js
  - uid: azure-storage._global.isValidEnumValue
    id: azure-storage._global.isValidEnumValue
    name: 'isValidEnumValue(value, list)'
    summary: Checks if the given value is a valid enumeration or not.
    fullName: 'azure-storage.isValidEnumValue(value, list)'
    type: Function
    syntax:
      parameters:
        - id: value
          type:
            - object
          description: The value to validate.
        - id: list
          type:
            - object
          description: The enumeration values.
      return:
        type:
          - boolean
        description: ''
      content: 'function isValidEnumValue(value, list)'
    langs:
      - js
  - uid: azure-storage._global.isValidUri
    id: azure-storage._global.isValidUri
    name: isValidUri(uri)
    summary: Creates a anonymous function that check if the given uri is valid or not.
    fullName: azure-storage.isValidUri(uri)
    type: Function
    syntax:
      parameters:
        - id: uri
          type:
            - string
          description: The uri to validate.
      return:
        type:
          - boolean
        description: ''
      content: function isValidUri(uri)
    langs:
      - js
  - uid: azure-storage._global.isValidHost
    id: azure-storage._global.isValidHost
    name: isValidHost(host)
    summary: Checks if the given host is valid or not.
    fullName: azure-storage.isValidHost(host)
    type: Function
    syntax:
      parameters:
        - id: host
          type:
            - string
            - object
          description: The host to validate.
      return:
        type:
          - boolean
        description: ''
      content: function isValidHost(host)
    langs:
      - js
  - uid: azure-storage._global.isValidUuid
    id: azure-storage._global.isValidUuid
    name: isValidUuid(uuid)
    summary: Checks if the given value is a valid UUID or not.
    fullName: azure-storage.isValidUuid(uuid)
    type: Function
    syntax:
      parameters:
        - id: uuid
          type:
            - string
            - object
          description: The uuid to validate.
      return:
        type:
          - boolean
        description: ''
      content: function isValidUuid(uuid)
    langs:
      - js
  - uid: azure-storage._global.isBase64Encoded
    id: azure-storage._global.isBase64Encoded
    name: isBase64Encoded(key)
    summary: Creates a anonymous function that check if a given key is base 64 encoded.
    fullName: azure-storage.isBase64Encoded(key)
    type: Function
    syntax:
      parameters:
        - id: key
          type:
            - string
          description: The key to validate.
      return:
        type:
          - function
        description: ''
      content: function isBase64Encoded(key)
    langs:
      - js
  - uid: azure-storage._global.isValidFunction
    id: azure-storage._global.isValidFunction
    name: isValidFunction(function)
    summary: Validates a function.
    fullName: azure-storage.isValidFunction(function)
    type: Function
    syntax:
      parameters:
        - id: function
          type:
            - object
          description: The function to validate.
      return:
        type:
          - function
        description: ''
      content: function isValidFunction(function)
    langs:
      - js
  - uid: azure-storage._global.containerNameIsValid
    id: azure-storage._global.containerNameIsValid
    name: containerNameIsValid(containerName)
    summary: Validates a container name.
    fullName: azure-storage.containerNameIsValid(containerName)
    type: Function
    syntax:
      parameters:
        - id: containerName
          type:
            - string
          description: The container name.
      content: function containerNameIsValid(containerName)
    langs:
      - js
  - uid: azure-storage._global.blobNameIsValid
    id: azure-storage._global.blobNameIsValid
    name: 'blobNameIsValid(containerName, blobname)'
    summary: Validates a blob name.
    fullName: 'azure-storage.blobNameIsValid(containerName, blobname)'
    type: Function
    syntax:
      parameters:
        - id: containerName
          type:
            - string
          description: The container name.
        - id: blobname
          type:
            - string
          description: The blob name.
      content: 'function blobNameIsValid(containerName, blobname)'
    langs:
      - js
  - uid: azure-storage._global.blobTierNameIsValid
    id: azure-storage._global.blobTierNameIsValid
    name: blobTierNameIsValid(blobTier)
    summary: Validates a blob tier name.
    fullName: azure-storage.blobTierNameIsValid(blobTier)
    type: Function
    syntax:
      parameters:
        - id: blobTier
          type:
            - string
          description: The blob tier name.
      content: function blobTierNameIsValid(blobTier)
    langs:
      - js
  - uid: azure-storage._global.shareNameIsValid
    id: azure-storage._global.shareNameIsValid
    name: shareNameIsValid(shareName)
    summary: Validates a share name.
    fullName: azure-storage.shareNameIsValid(shareName)
    type: Function
    syntax:
      parameters:
        - id: shareName
          type:
            - string
          description: The share name.
      content: function shareNameIsValid(shareName)
    langs:
      - js
  - uid: azure-storage._global.queueNameIsValid
    id: azure-storage._global.queueNameIsValid
    name: queueNameIsValid(queueName)
    summary: Validates a queue name.
    fullName: azure-storage.queueNameIsValid(queueName)
    type: Function
    syntax:
      parameters:
        - id: queueName
          type:
            - string
          description: The queue name.
      content: function queueNameIsValid(queueName)
    langs:
      - js
  - uid: azure-storage._global.tableNameIsValid
    id: azure-storage._global.tableNameIsValid
    name: tableNameIsValid(table)
    summary: Validates a table name.
    fullName: azure-storage.tableNameIsValid(table)
    type: Function
    syntax:
      parameters:
        - id: table
          type:
            - string
          description: The table name.
      content: function tableNameIsValid(table)
    langs:
      - js
  - uid: azure-storage._global.browserFileIsValid
    id: azure-storage._global.browserFileIsValid
    name: browserFileIsValid(browserFile)
    summary: Validates an HTML File object.
    fullName: azure-storage.browserFileIsValid(browserFile)
    type: Function
    syntax:
      parameters:
        - id: browserFile
          type:
            - azure-storage.File
          description: The HTML File object.
      content: function browserFileIsValid(browserFile)
    langs:
      - js
  - uid: azure-storage._global.pageRangesAreValid
    id: azure-storage._global.pageRangesAreValid
    name: 'pageRangesAreValid(rangeStart, rangeEnd, writeBlockSizeInBytes)'
    summary: Validates page ranges.
    fullName: >-
      azure-storage.pageRangesAreValid(rangeStart, rangeEnd,
      writeBlockSizeInBytes)
    type: Function
    syntax:
      parameters:
        - id: rangeStart
          type:
            - azure-storage.int
          description: The range starting position.
        - id: rangeEnd
          type:
            - azure-storage.int
          description: The range ending position.
        - id: writeBlockSizeInBytes
          type:
            - azure-storage.int
          description: The block size.
      content: 'function pageRangesAreValid(rangeStart, rangeEnd, writeBlockSizeInBytes)'
    langs:
      - js
  - uid: azure-storage._global.blobTypeIsValid
    id: azure-storage._global.blobTypeIsValid
    name: blobTypeIsValid(type)
    summary: Validates a blob type.
    fullName: azure-storage.blobTypeIsValid(type)
    type: Function
    syntax:
      parameters:
        - id: type
          type:
            - string
          description: The type name.
      content: function blobTypeIsValid(type)
    langs:
      - js
  - uid: azure-storage._global.shareACLIsValid
    id: azure-storage._global.shareACLIsValid
    name: shareACLIsValid(type)
    summary: Validates share ACL type.
    fullName: azure-storage.shareACLIsValid(type)
    type: Function
    syntax:
      parameters:
        - id: type
          type:
            - string
          description: The type name.
      content: function shareACLIsValid(type)
    langs:
      - js
  - uid: azure-storage._global.shareQuotaIsValid
    id: azure-storage._global.shareQuotaIsValid
    name: shareQuotaIsValid(type)
    summary: Validates share quota value.
    fullName: azure-storage.shareQuotaIsValid(type)
    type: Function
    syntax:
      parameters:
        - id: type
          type:
            - azure-storage.int
          description: The quota value.
      content: function shareQuotaIsValid(type)
    langs:
      - js
  - uid: azure-storage._global.propertyType
    id: azure-storage._global.propertyType
    name: propertyType(value)
    summary: Get the Edm type of an object.
    fullName: azure-storage.propertyType(value)
    type: Function
    syntax:
      parameters:
        - id: value
          type:
            - object
          description: A typed instance.
      return:
        type:
          - string
        description: The Edm type.
      content: function propertyType(value)
    langs:
      - js
  - uid: azure-storage._global.deserializeValueFromJson
    id: azure-storage._global.deserializeValueFromJson
    name: 'deserializeValueFromJson(type, value)'
    summary: "Convert a JSON value from over the wire into the correct EDM type.\r\rNote that Int64, is remaining a string.  Converting it to a Number would lose precision.\rInt32, Boolean, and Double should already be the correct non-string types"
    fullName: 'azure-storage.deserializeValueFromJson(type, value)'
    type: Function
    syntax:
      parameters:
        - id: type
          type:
            - string
          description: The type of the value as it appears in the type attribute.
        - id: value
          description: The value in JSON format.
      return:
        type:
          - object
        description: The unserialized value.
      content: 'function deserializeValueFromJson(type, value)'
    langs:
      - js
  - uid: azure-storage._global.serializeValue
    id: azure-storage._global.serializeValue
    name: 'serializeValue(type, value)'
    summary: "Convert a raw EdmType value into the JSON value expected to be sent over the wire.\r\rTODO: validate correct input types?\rExpects Edm.Int64 and Edm.String to be string, Edm.Double and Edm.Int32 to be Number,\rEdm.Guid to be an array or buffer compatible with Node.uuid, Edm.Binary to be a Node Buffer, Edm.DateTime to be a Date,\rand Edm.Boolean to be a boolean."
    fullName: 'azure-storage.serializeValue(type, value)'
    type: Function
    syntax:
      parameters:
        - id: type
          type:
            - string
          description: The type of the value as it will appear in the type attribute.
        - id: value
          type:
            - string
          description: The value
      return:
        type:
          - object
        description: The serialized value.
      content: 'function serializeValue(type, value)'
    langs:
      - js
  - uid: azure-storage._global.serializeQueryValue
    id: azure-storage._global.serializeQueryValue
    name: serializeQueryValue(value)
    summary: Serializes value into proper value to be used in odata query value.
    fullName: azure-storage.serializeQueryValue(value)
    type: Function
    syntax:
      parameters:
        - id: value
          type:
            - object
          description: The value to be serialized.
      return:
        type:
          - string
        description: The serialized value.
      content: function serializeQueryValue(value)
    langs:
      - js
  - uid: azure-storage._global.constructEntityWebResource
    id: azure-storage._global.constructEntityWebResource
    name: 'constructEntityWebResource(operation, table, entityDescriptor, options)'
    summary: Constructs the web resource for a table operation.
    fullName: >-
      azure-storage.constructEntityWebResource(operation, table,
      entityDescriptor, options)
    type: Function
    syntax:
      parameters:
        - id: operation
          type:
            - string
          description: The operation to perform.
        - id: table
          type:
            - string
          description: The table name.
        - id: entityDescriptor
          type:
            - object
          description: The entity descriptor.
        - id: options
          type:
            - object
          description: The create options or callback function.
          optional: true
        - id: options.checkEtag
          type:
            - boolean
          description: Boolean value indicating weather the etag should be matched or not.
          optional: true
        - id: options.echoContent
          type:
            - string
          description: >-
            Whether or not to return the entity upon a successful insert.
            Default to false.
          optional: true
        - id: options.payloadFormat
          type:
            - string
          description: The payload format to use for the request.
          optional: true
        - id: options.locationMode
          type:
            - azure-storage.LocationMode
          description: "Specifies the location mode used to decide which location the request should be sent to. \r                                                                Please see StorageUtilities.LocationMode for the possible values."
          optional: true
        - id: options.timeoutIntervalInMs
          type:
            - azure-storage.int
          description: >-
            The server timeout interval, in milliseconds, to use for the
            request.
          optional: true
        - id: options.clientRequestTimeoutInMs
          type:
            - azure-storage.int
          description: >-
            The timeout of client requests, in milliseconds, to use for the
            request.
          optional: true
        - id: options.maximumExecutionTimeInMs
          type:
            - azure-storage.int
          description: "The maximum execution time, in milliseconds, across all potential retries, to use when making this request.\r                                                                The maximum execution time interval begins at the time that the client begins building the request. The maximum\r                                                                execution time is checked intermittently while performing requests, and before executing retries."
          optional: true
      return:
        type:
          - azure-storage.webResource
        description: ''
      content: >-
        function constructEntityWebResource(operation, table, entityDescriptor,
        options)
    langs:
      - js
  - uid: azure-storage._global.setTableRequestHeadersAndBody
    id: azure-storage._global.setTableRequestHeadersAndBody
    name: 'setTableRequestHeadersAndBody(webResource, body)'
    summary: Sets the table request headers.
    fullName: 'azure-storage.setTableRequestHeadersAndBody(webResource, body)'
    type: Function
    syntax:
      parameters:
        - id: webResource
          type:
            - string
          description: The webResource to add headers to.
        - id: body
          type:
            - object
          description: The body of the request.
          optional: true
      content: 'function setTableRequestHeadersAndBody(webResource, body)'
    langs:
      - js
references:
  - uid: azure-storage.TableService
    name: TableService
    fullName: azure-storage.TableService
    isExternal: false
  - uid: azure-storage.BlobService
    name: BlobService
    fullName: azure-storage.BlobService
    isExternal: false
  - uid: azure-storage.FileService
    name: FileService
    fullName: azure-storage.FileService
    isExternal: false
  - uid: azure-storage.QueueService
    name: QueueService
    fullName: azure-storage.QueueService
    isExternal: false
